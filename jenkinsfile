pipeline {
    agent any

    parameters {
        // choice(name: 'CHOICE_TAG', choices: ['@valid', '@invalid', '@Integration', '@Post'], description: 'Tag des tests')
        choice(name: 'ENVIRONMENT', choices: ['INT', 'REC','@valid', '@invalid', '@Integration', '@Post'], description: 'Choix de lenvironnement')
    }

    stages {
        stage('Install Dependencies') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.51.0-noble'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    sh 'node -v'
                    // sh 'npm -v'
                    sh 'npm ci'
                    sh 'npm install -g allure-commandline --save-dev'

                    // stash name: 'node_modules', includes: 'node_modules/**'

                }
            }
        }

        stage('Run Tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.51.0-noble'
                    args '-u root:root'
                }
            }
            steps {
                script {
                    //   sh 'npm ci'
                    // def environments = [
                    //     'INT' : [baseUrl: 'http://int.siteinfos.com/admin/login/?next=/admin/', username: 'testeur_integration', password: 'testeur_qa'],
                    //     'REC' : [baseUrl: 'http://rec.siteinfos.com/admin/login/?next=/admin/', username: 'testeur_recette', password: 'testeur_qa_3']
                    // ]
                    
                    // def BASE_URL = environments[params.ENVIRONMENT].baseUrl
                    // sh "TAGS='@${params.ENVIRONMENT}' npx cucumber-js --config cucumber.js" 
                    // sh "TAGS='@${params.ENVIRONMENT}' npx cucumber-js --config cucumber.js"
                     def tagToUse = params.ENVIRONMENT
                    echo "Running tests with tag: @${tagToUse}"

                    sh "TAGS='@${tagToUse}' npx cucumber-js  --format allure-cucumberjs/reporter"
                  stash name: 'allure-results', includes: 'allure-results/*'
                }
            }
        }
    }

    post {
        always {
            unstash 'allure-results'
            script {
                
                allure([
                    includeProperties: false,
                    jdk: '',
                    properties: [],
                    reportBuildPolicy: 'ALWAYS',
                    results: [[path: 'allure-results']]
                ])
            }
        }
    }
}

// pipeline {
//     agent any

//     parameters {
//         choice(name: 'ENVIRONMENT', choices: ['DEV', 'PROD'], description: 'Choix de lenvironnement')
//         choice(name: 'CHOICE_TAG', choices: ['@valid', '@invalid', '@Integration', '@Post'], description: 'Tag des tests')
//     }

//     stages {
//         stage('Install Dependencies') {
//             agent {
//                 docker {
//                      image 'mcr.microsoft.com/playwright:v1.51.0-noble' 
//                     args '-u root:root'
//                 }
//             }
//             steps {
//                 script {
//                     sh 'node -v'
//                     sh 'npm -v'
//                     sh 'npm ci'
//                     stash name: 'node_modules', includes: 'node_modules/**'
//                 }
//             }
//         }

//         stage('Run Tests') {
//             agent {
//                 docker {
//                      image 'mcr.microsoft.com/playwright:v1.51.0-noble'
//                     args '-u root:root'
//                 }
//             }
//             steps {
//                 script {
//                      sh 'npm ci'
//                      sh 'npm install --save-dev allure-cucumberjs'
//                     def environments = [
//                         'integration' : [baseUrl: 'http://int.siteinfos.com/admin/login/?next=/admin/', username: 'testeur_integration', password: 'testeur_qa'],
//                         'recette' : [baseUrl: 'http://rec.siteinfos.com/admin/login/?next=/admin/', username: 'testeur_recette', password: 'testeur_qa_3']
//                     ]
//                     def BASE_URL = environments[params.ENVIRONMENT].baseUrl
//                     // def config = environments[params.ENVIRONMENT]
//                     // unstash 'node_modules'
//                     sh "npx cucumber-js --format json:reports/cucumber-report.json --tags '${params.CHOICE_TAG}' --world-parameters '{\"env\":\"${params.ENVIRONMENT}\", \"baseUrl\":\"${BASE_URL}\"}'"
//                     stash name: 'allure-results', includes: 'allure-results/*'
//                 }
//             }
//         }
//     }

//   post {
//         always {
//             unstash 'allure-results'
//             script {
//                 allure([
//                     includeProperties: false,
//                     jdk: '',
//                     properties: [],
//                     reportBuildPolicy: 'ALWAYS',
//                     results: [[path: 'allure-results']]
//                 ])
//             }
//         }
//     }
// }

// // pipeline {
// //     agent any
// //     // parameters {
// //     //     string(name: 'String_TAG', defaultValue: '', description: 'Tag de test')
// //     //     choice(name: 'CHOICE_TAG', choices: ['@valid', '@invalid', '@Integration','@Post'], description: 'Sélectionne un tag de test')
// //     // }
// //     stages {
// //         stage('build and install') {
// //             agent {
// //                 docker {
// //                     image 'mcr.microsoft.com/playwright:v1.51.0-noble'
// //                     args '-u root:root'
// //                 }
// //             }

// //             steps {
// //                 script {
                    
// //                     sh 'npm ci'
// //                     // def tagToUse = params.String_TAG ?: params.CHOICE_TAG
// //                     // sh "npx cucumber-js --format json:reports/cucumber-report.json --tags '${params.CHOICE_TAG}'"
// //                     // sh "npm run only '${params.CHOICE_TAG}'"
// //                     sh 'npx cucumber-js --format json:reports/cucumber-report.json'
// //                     stash name: 'allure-results', includes: 'allure-results/*'

// //                 }
// //             }

// //         }
// //     }
// //     post {
// //         always {
// //             unstash 'allure-results'
// //             script {
// //                 allure([
// //                     includeProperties: false,
// //                     jdk: '',
// //                     properties: [],
// //                     reportBuildPolicy: 'ALWAYS',
// //                     results: [[path: 'allure-results']]
// //                 ])
// //             }
// //         }
// //     }

// // // post {
// // //     always {
// // //         cucumber buildStatus: 'UNSTABLE',
// // //                 failedFeaturesNumber: 1,
// // //                 failedScenariosNumber: 1,
// // //                 skippedStepsNumber: 1,
// // //                 failedStepsNumber: 1,
// // //                 classifications: [
// // //                         [key: 'Commit', value: '<a href="${GERRIT_CHANGE_URL}">${GERRIT_PATCHSET_REVISION}</a>'],
// // //                         [key: 'Submitter', value: '${GERRIT_PATCHSET_UPLOADER_NAME}']
// // //                 ],
// // //                 reportTitle: 'My report',
// // //                 fileIncludePattern: 'reports/cucumber-report.json',
// // //                 sortingMethod: 'ALPHABETICAL',
// // //                 trendsLimit: 100
// // //     }
// // // }
// // }

// // // pipeline { 
// // //     agent any

// // //     parameters {
// // //         string(name: 'String_TAG', defaultValue: '', description: 'Tag de test personnalisé (laisser vide si non utilisé)')
// // //         choice(name: 'CHOICE_TAG', choices: ['@valid', '@invalid', '@Integration', '@Post'], description: 'Sélectionne un tag de test')
// // //     }

// // //     stages {
// // //         stage('Install Dependencies') {
// // //             agent any
// // //             steps {
// // //                 script {
// // //                     sh 'npm ci'
// // //                     stash name: 'node_modules', includes: 'node_modules/**'
// // //                 }
// // //             }
// // //         }

// // //         stage('Run Tests') {
// // //             agent {
// // //                 docker {
// // //                     image 'mcr.microsoft.com/playwright:v1.51.0-noble'
// // //                     args '-u root:root'
// // //                 }
// // //             }
// // //             steps {
// // //                 script {
// // //                  unstash 'node_modules'
// // //                  sh 'npx cucumber-js --format json:reports/cucumber-report.json'
// // //                  stash name: 'allure-results', includes: 'allure-results/*'
// // //                 }
// // //             }
// // //         }
// // //     }

// // //     post {
// // //         always {
// // //             unstash 'allure-results'
// // //             script {
// // //                 allure([
// // //                     includeProperties: false,
// // //                     jdk: '',
// // //                     properties: [],
// // //                     reportBuildPolicy: 'ALWAYS',
// // //                     results: [[path: 'allure-results']]
// // //                 ])
// // //             }
// // //         }
// // //     }
// // // }
